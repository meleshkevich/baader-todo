The To Do List

Given is a bare skeleton for a stand-alone to-do scheduler application. A user should be able to add his to-dos in a list which should always be visible. When the user clicks on any of the task items in this list, he/she should be able to see the details of the task.  A task should have a title, a description and a priority (numeric). The task list should display tasks based on this priority. The user can delete tasks as well.

1. The div with class parentDiv should only have 90% of the available space horizontally and 80% of the available space vertically.

2. There are three divs with class section. These divs are supposed to be displayed next to each other horizontally, i.e. the div with the ID summaryList should be displayed on the extreme left of the page, the div with the ID showTodo should be displayed in the center and the div with the ID addToDos should be displayed on the right.  Also, these divs should have a 1px broad border only on the right side of each, and all three should take exactly 33% of width and 100% height available inside their parent node. 

3. When the page loads, the span with ID taskLabel should not be visible as there is no task to display, so add a CSS class hidden on this span using JavaScript. Also, apply this class on the div with ID taskDisplayDiv (as initially there is no task for which the details should be displayed).

4. Add a drop down inside the div with ID  addToDos with values from 1 to 10 and ID as prioritySelect, so that the user can provide/select the priority of a task he/she is adding.

5. In the external JavaScript, have a constructor with name ToDoConstructor. It should have an array with the name toDoList, which should contain all the task(to-do) items. Each task item is an object having a title, a description and a priority, and also a unique, numeric id. The constructor should also have functions like addTask (to add a task in the array, give the task item object a numeric, unique ID), removeTask (to remove a task item from the array, given its id) and getTask (this function should return the task item object, given its id). You should call the constructor to create an object with the name taskAppObj when the page loads. Also, get all the elements which you would need to use later and store them in the window context. Do this inside a function with the name init, which should be called on page load. 

6. When the (only) button in clicked, take the values of the input (" titleInput"), the textfield and the drop-down, use taskAppObj's addTask method to add this task's details in toDoList. Also, you need to show all task titles in the UL with ID  toDosList in separate list-items. For example, if there were 2 task items before adding a new one, the older 2 should be there in the array toDoList, and their titles should be their in 2 separate LIs under this UL with ID  toDosList, this newly added task item's title should also be displayed in a newly added LI, sorted in a descending priority.  Also, remove the CSS class hidden from the span with ID  taskLabel. For this, you need to have a CSS class in the external CSS file with the selector hidden, this class should just hide an element. Then add the class hidden on the span with ID noTaskSpan.

7. In the LI itself, display a sign, 'x' with a CSS class removetask which has the color red and floats towards the right (for this, inside the LI, have a span with an 'x' in it and add the class removeTask to this span). Clicking on this sign should call the method removeTask of the taskAppObj with the ID of the task as parameter. Also, this LI should be removed from View.

8. If the user clicks on the LI (anywhere but the sign 'x'), the details of this task item should be displayed inside the div with the ID taskDisplayDiv, i.e. the task title should go in the span with ID  titleSpan, the task description should go in the span with ID  descrSpan, and the task priority should go in the span with ID  prioritySpan. Also, remove the class hidden from this div (the div with ID  taskDisplayDiv) now.